@model homeopatija.Dtos.DrugViewDto
@{
  ViewData["Title"] = Model.Drug.Title;
}

<div class="drug-card mb-3">
  <img width="200px" src="@Model.Drug.ImageUrl" alt="@Model.Drug.Title" class="product-image">
  <h2>@Model.Drug.Title</h2>
  <p class="product-price">$@Model.Drug.Price</p>
  <a href="/Product/Details/@Model.Drug.Id" class="product-details-link">Peržiūrėti</a>
</div>


<dialog id="reportCommentModal">
  <form id="reportForm" action="/Comment/Report" method="post">
    <input type="hidden" id="commentReportInput" name="CommentId" value="">
    <div>Pranešti apie netinkamą komentarą</div>
    <br>
    <div class="form-group">
      <label class="mb-3" for="reportType">Komentaro tipas</label>
      <select class="mb-3 form-control" id="reportType" name="ReportType">
        @foreach (var reportType in Enum.GetValues(typeof(homeopatija.Entities.ReportType)))
        {
          <option value="@((int)reportType)">@reportType</option>
        }
      </select>
    </div>

    <button class="btn btn-outline-danger" id="cancel-report-btn">Atšaukti</button>
    <button class="btn btn-success" id="submitReportBtn">Pranešti</button>
  </form>
</dialog>


<dialog id="editCommentModal">
  <form action="/Comment/Update" id="commentEditForm" method="post">
    <input type="hidden" id="commentIdInput" name="Id" value="">
    <input type="hidden" id="drugId" name="DrugId" value="@Model.Drug.Id">
    <div>Redaguoti komentarą</div>
    <textarea class="form-control rounded-0" name="Body" id="update-comment-body-area" rows="3"></textarea>
    <button class="btn btn-outline-danger" id="cancel-edit-btn">Atšaukti</button>
    <button class="btn btn-success" id="submit-updated-comment-btn">Atnaujinti komentarą</button>
  </form>
</dialog>


<div id="comment-section">

  <form class="m-3" method="post" id="newCommentForm" action="/Comment/Create">
    @Html.HiddenFor(m=>m.Drug.Id)


    @* kai bus padaryta authentikacija *@
    @* @if(User.Identity.IsAuthenticated)
    {
    <input type="hidden" name="userId" value="@User.Identity.Name" />
    } *@

    @Html.Hidden("UserId", 1)
    @Html.Hidden("DrugId", Model.Drug.Id)

    <div class="form-group">
      <label class="h3" for="comment-body">Rašyti komentarą</label>
      @Html.TextArea("Body", new {@class="form-control rounded-0", @placeholder = "Rašykite komentaro tekstą"})
    </div>
    <button id="submit-comment" class="btn btn-primary float-right" type="submit">Komentuoti</button>
  </form>


  <h1>Komentarai</h1>
  @foreach (var item in Model.Comments)
  {
    Html.RenderPartial("_CommentPartial", item);
  }
</div>

<script>

  const reportModal = document.getElementById("reportCommentModal")
  const editCommentModal = document.getElementById("editCommentModal")

  //------comment reporting ---------

  const commentSection = document.querySelector("#comment-section");
  const commentIdInput = document.getElementById("commentIdInput");

  //-------- comment editing -----------

  commentSection.addEventListener("click", (event) => {
    if (event.target && event.target.hasAttribute("data-comment-edit")) {
      const commentId = event.target.getAttribute("data-comment-id");
      commentIdInput.value = commentId

      const commentElement = event.target.closest('.comment');
      if (commentElement) {
        const commentBody = commentElement.querySelector('.comment-body');

        let updateCommentInput = document.getElementById("update-comment-body-area")
        if (commentBody) {
          updateCommentInput.value = commentBody.innerText
        }
        editCommentModal.showModal();
      }
    }

  });

  const cancelEditButton = document.getElementById("cancel-edit-btn")

  cancelEditButton.addEventListener("click", (event) => {
    event.preventDefault()
    editCommentModal.close()
  })


  const submitEditedCommentButton = document.getElementById("submit-updated-comment-btn")


  // -----------comment delete -----------------
  commentSection.addEventListener("click", (event) => {

    if (!event.target) {
      return
    }

    const commentId = event.target.getAttribute("data-comment-id");

    if (event.target.hasAttribute("data-comment-delete")) {
      if (confirm("Ar tikrai norite ištrinti komentarą?")) {
        fetch("/Comments/" + commentId, { method: 'DELETE' })
          .then(res => {
            if (res.ok) {
              return res.text().then(data => data)
            }
          })
          .then(data => {
            console.log(data)
            let removedComment = document.querySelector("[comment-id]")
            commentSection.removeChild(removedComment)
          })
          .catch(error => console.error("Error: ", error))
      }
    }

    if (event.target.hasAttribute("data-comment-report")) {
      const reportCommentInput = document.getElementById("commentReportInput")
      reportCommentInput.value = commentId
      reportModal.showModal()
    }



  });

  const reportBtn = document.getElementById("submitReportBtn")
  const reportForm = document.getElementById("reportForm")
  reportBtn.addEventListener('click', async (event) => {
    event.preventDefault()
    reportModal.close()

    const formData = new FormData(reportForm);

    try {
      const response = await fetch("/Comment/Report", {
        method: 'POST',
        body: formData,
      });


      if (response.ok) {
        console.log("Reported successfully");
        alert("Pranešimas išsiųstas administratoriui")
      } else {
        alert("Nepavyko išsiųsti pranešimo")
      }
    } catch (error) {
      console.error("Error: ", error);
    }

  })


</script>