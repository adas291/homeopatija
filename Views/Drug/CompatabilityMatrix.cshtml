@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@

@{
    ViewData["Title"] = "Suderinamumo matrica";
}

<style>
    .compat-table {
        margin-top: 1rem;
    }

    .compat-table td {
        font-size: 0;
    }

    .compat-table {
        line-height: 0;
    }

    .column-header th {
        white-space: nowrap;
        writing-mode: vertical-rl;
    }
</style>

<h1>Compatability matrix</h1>
<form asp-action="SaveCompatability" method="post">
<input type="submit" value="Saugoti" class="btn btn-primary" />

<table cellspacing="0" cellpadding="0" class="compat-table">
    <tr class="column-header">
        <th></th>
        @foreach (var rowItem in Model.drugs)
        {
            <th>@rowItem.Title</th>
        }
    </tr>

    @foreach (var rowItem in Model.drugs)
    {
        <tr>
            <th>@rowItem.Title</th>
            @foreach (var columnItem in Model.drugs)
            {
                <td>
                    <input
                        x-row="@rowItem.Id"
                        x-column="@columnItem.Id"
                        disabled="@(rowItem.Id == columnItem.Id)"
                        type="checkbox"
                        @Html.Raw(Model.compatibilities.Contains(Tuple.Create(Math.Min(rowItem.Id, columnItem.Id), Math.Max(rowItem.Id, columnItem.Id))) ? "checked" : "")
                        @Html.Raw(rowItem.Id < columnItem.Id ? $"name='{rowItem.Id}-{columnItem.Id}'" : "") />
                </td>
            }
        </tr>
    }
</table>
</form>

<script>
    const compat_table = document.getElementsByClassName("compat-table")[0]
    const cells = compat_table.getElementsByTagName("input")

    function findByRowAndColumn(rowId, columnId) {
        for (var cell of cells) {
            const cellRowId = cell.getAttribute("x-row")
            const cellColumnId = cell.getAttribute("x-column")
            if (rowId == cellRowId && columnId == cellColumnId) {
                return cell
            }
        }
    }

    for (var cell of cells) {
        if (cell.getAttribute("disabled")) continue

        cell.addEventListener("input", (event) => {
            const rowId = event.target.getAttribute("x-row")
            const columnId = event.target.getAttribute("x-column")
            console.log(rowId, columnId)

            const mirrorCell = findByRowAndColumn(columnId, rowId)
            mirrorCell.checked = !mirrorCell.checked
        })
    }
</script>